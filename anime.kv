ScreenManager:
    StartScreen: # Skærmen hvori forbrugeren kan indput en anime genre
    ResultsScreen: # Skærmen der displayer anime resultater

<StartScreen>:
    BoxLayout: # Forældre widget der laver layoutet af programmet
        orientation: "vertical" # Arrangerer child widgets vertikalt
        padding: 30 # Står for hvor meget plads der er omkring kanterne af layoutet
        spacing: 20 # Står for hvor meget plads der er imellem child widgets

        TextInput: # Brugeren indtaster en genre i
            id: genre_input
            hint_text: "Indtast animegenre" # Pladsholder tekst indtil indput intastes
            background_color: (0.6,0,0,1) # Farvekode som bruges i form af RGBA værdier fra 0 til 1
            foreground_color: (1,1,1,1)
            hint_text_color: (0.8,0.8,0.8,1)
            font_size: 60 # Størrelsen af teksten i programmet
            size_hint: (1, 0.2) # fortæller programmet hvor stor child widgeten skal være i forhold til forældre widgeten

        Button:
            text: "Søg"
            background_color: (0.5,0.7,0.9,1)
            color: (1,1,1,1)
            font_size: 60
            size_hint: (1, 0.2)
            on_press: root.search_anime(genre_input.text) # on_press kalder på metoden search_anime i python file, som indholder tekst input

<ResultsScreen>:
    BoxLayout:
        orientation: "vertical"
        spacing: 10
        padding: 10

        ScrollView: # Et child widget der gør det muligt at kunne scroll igennem sine anime resultater
            size_hint: (1, 0.9)

            GridLayout:
                id: grid_layout
                cols: 5 # Styrer hvor mange mængde columns der må være for anime
                size_hint_y: None
                row_default_height: 300 # row_default_height står for standardhøjden af hver række
                row_force_default: True # row_force_default tvinger alle rækker til at have samme højde
                spacing: 10
                padding: 10
                height: self.minimum_height # Sætter højden af gridlayoutet til at være minimum for at passe alle elementer

        Button:
            text: "Tilbage"
            background_color: (0.5,0.7,0.9,1)
            color: (1,1,1,1)
            font_size: 40
            size_hint: (1, 0.1)
            on_press: app.root.current = "start" # on_press kalder på class_StartScreen for at komme tilbage til startskærmen

<ErrorPopup@Popup>: # Error pop up er defineret her i kivy filen
    title: "Inputfejl"
    size_hint: 0.8, 0.6

    BoxLayout:
        orientation: "vertical"
        spacing: 10
        padding: 10

        Label:
            id: error_message # ID som Python kan kalde på, til at indsætte tekst
            color: (1,0,0,1)
            text: ""

        Button:
            text: "Luk"
            size_hint_y: 0.2
            on_press: root.dismiss() # on_press Lukker popup vinduet når det trykkes